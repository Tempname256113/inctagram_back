// если надо стянуть существующие таблицы из бд то надо запустить команду
// !!! ВАЖНО
// прежде чем юзать команду надо посмотреть в package.json
// какой путь к переменным окружения указан в команде
// yarn prisma_db_pull

// в локальном окружении можно использовать prisma db push
// чтобы внести новые модели в базу данных без создания миграций

// после того как новые изменения находятся в базе данных нужно обновить клиент prisma
// чтобы использовать новые изменения prisma в программе
// prisma generate

// чтобы создать миграцию нужно использовать команду npx prisma migrate dev --name migrationName (только в dev среде)

// чтобы использовать миграции перед деплоем нужно использовать prisma migrate deploy
// эта команда применяет существующие миграции

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique @db.Citext
  username String  @unique
  password String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userEmailInfo              UserEmailInfo?
  userChangePasswordRequests UserChangePasswordRequest[]
  userSessions               UserSession[]
  UserProfile                UserProfile?

  @@map("users")
}

model UserSession {
  userId           Int
  refreshTokenUuid String
  expiresAt        DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@id([userId, refreshTokenUuid])
  @@map("user_sessions")
}

enum Providers {
  Google
  Github
}

model UserEmailInfo {
  userId           Int        @id
  emailIsConfirmed Boolean    @default(false)
  emailConfirmCode String?
  // expiresAt это дата после которой код для подтверждения регистрации будет уже не актуален
  expiresAt        DateTime?
  provider         Providers?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_email_info")
}

enum UserChangePasswordRequestStates {
  pending
  processed
}

model UserChangePasswordRequest {
  id                   Int                             @id @default(autoincrement())
  userId               Int
  state                UserChangePasswordRequestStates @default(pending)
  passwordRecoveryCode String?
  expiresAt            DateTime?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("user_change_password_requests")
}

model UserProfile {
  userId      Int       @id @unique
  username    String    @unique @db.Citext
  firstName   String    @db.VarChar(255)
  lastName    String    @db.VarChar(255)
  dateOfBirth DateTime? @db.Date()
  country     String?   @db.VarChar(255)
  city        String?   @db.VarChar(255)
  aboutMe     String?   @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}
