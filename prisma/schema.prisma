// если надо стянуть существующие таблицы из бд то надо запустить команду
// !!! ВАЖНО
// прежде чем юзать команду надо посмотреть в package.json
// какой путь к переменным окружения указан в команде
// yarn prisma_db_pull

// в локальном окружении можно использовать prisma db push
// чтобы внести новые модели в базу данных без создания миграций

// после того как новые изменения находятся в базе данных нужно обновить клиент prisma
// чтобы использовать новые изменения prisma в программе
// prisma generate


generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [citext]
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique @db.Citext
  username           String              @unique
  password           String
  userAdditionalInfo UserAdditionalInfo?
  authTokens AuthToken[]
  changePasswordRequests ChangePasswordRequest[]

  @@map("users")
}

model UserAdditionalInfo {
  userId                  Int      @id
  emailIsConfirmed        Boolean  @default(false)
  registrationConfirmCode String
  // registrationCodeEndDate это дата после которой код для подтверждения регистрации будет уже не актуален
  registrationCodeEndDate DateTime
  user                    User     @relation(fields: [userId], references: [id])

  @@map("user_additional_info")
}

model AuthToken {
  id                Int @id @default(autoincrement())
  userId            Int
  accessKey         String
  accessExpiresAt   DateTime 
  refreshKey        String
  refreshExpiresAt  DateTime
  user              User @relation(fields: [userId], references: [id])

  @@map("auth_tokens")
}

enum ChangePasswordRequestStateEnum {
  pending
  processed
}

model ChangePasswordRequest {
  id Int @id @default(autoincrement())
  userId Int
  state ChangePasswordRequestStateEnum @default(pending)
  token String @db.Text
  expiresAt DateTime
  processedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  deletedAt DateTime?
  user User @relation(fields: [userId], references: [id])

  @@map("change_password_requests")
}